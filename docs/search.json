[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2\n\n\ntest"
  },
  {
    "objectID": "posts/test/index.html",
    "href": "posts/test/index.html",
    "title": "Test Post",
    "section": "",
    "text": "library(palmerpenguins)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = penguins, aes(x = bill_length_mm)) +\n  geom_histogram(color = \"black\", fill = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`)."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To Ben’s Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/blog_post_01/index.html",
    "href": "posts/blog_post_01/index.html",
    "title": "Blog Post 01",
    "section": "",
    "text": "In this blog post, I am analyzing a data set of 2024 MLB Fantasy Baseball Projections. These projections are ‘Zeile’ Projections (sourced from FantasyPros), which are baseball specific projections derived from a consensus of 7 sources including ESPN, Draft Buddy, Baseball Think Factory, Steamer Blog, Razzball, Derek Carty, and FanGraphs. This data set consists 747 observations (players) and 17 variables which include: ‘Player’, ‘Team’, ‘Positions’, ‘AB’, ‘R’, ‘HR’, ‘RBI’, ‘SB’, ‘AVG’, ‘OBP’, ‘H’, ‘2B’, , ‘3B’, ‘BB’, ‘SO’, ‘SLG’, ‘OPS’. This data set is hitter specific, so some of the variables I am most interested in include ‘AVG’ (Batting Average) and ‘OPS’ (On Base Percentage Plus Slugging Percentage). Using these variables, I aim to visualize which teams will have the strongest projected offenses.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nprojections &lt;- read_csv('/Users/bensunshine/Documents/SLU_Senior_Year/SP24/data_334/ds334blog/data/FantasyPros_2024_Projections_H.csv')\n\nRows: 747 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Team, Positions\ndbl (14): AB, R, HR, RBI, SB, AVG, OBP, H, 2B, 3B, BB, SO, SLG, OPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmissing_team &lt;-\n  projections %&gt;%\n  filter(is.na(Team))\n\nnum_players &lt;- nrow(projections)\n\ndivision_order &lt;- c('AL EAST', 'AL CENTRAL', 'AL WEST', 'NL EAST', 'NL CENTRAL', 'NL WEST', NA)\n\nprojections &lt;-\n  projections %&gt;%\n  filter(!is.na(Team)) %&gt;%\n  mutate(Division = case_when(\n    grepl('(BOS|NYY|TOR|BAL|TB)', Team) ~ 'AL EAST',\n    grepl('(MIN|DET|CLE|CWS|KC)', Team) ~ 'AL CENTRAL',\n    grepl('(HOU|TEX|SEA|LAA|OAK)', Team) ~ 'AL WEST',\n    grepl('(ATL|PHI|MIA|NYM|WSH)', Team) ~ 'NL EAST',\n    grepl('(MIL|CHC|CIN|PIT|STL)', Team) ~ 'NL CENTRAL',\n    grepl('(LAD|ARI|SD|SF|COL)', Team) ~ 'NL WEST'\n  )) %&gt;%\n  mutate(Division = factor(Division, levels = division_order))\n\n\nteam_avg_projections &lt;- \n  projections %&gt;%\n  group_by(Division, Team) %&gt;%\n  summarise(num_player = n(),\n            avg_hr = mean(HR),\n            avg_baa = mean(AVG),\n            avg_hits = mean(H),\n            avg_ops = mean(OPS),\n            se_baa = sqrt(\n              ((mean(AVG)/n()) * (1-(mean(AVG)/n()))) /\n                n()\n              )\n            ) %&gt;%\n  mutate(Division = factor(Division, levels = division_order),\n         lb_se_baa = avg_baa - se_baa,\n         ub_se_baa = avg_baa + se_baa)\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/blog_post_01/index.html#introduction",
    "href": "posts/blog_post_01/index.html#introduction",
    "title": "Blog Post 01",
    "section": "",
    "text": "In this blog post, I am analyzing a data set of 2024 MLB Fantasy Baseball Projections. These projections are ‘Zeile’ Projections (sourced from FantasyPros), which are baseball specific projections derived from a consensus of 7 sources including ESPN, Draft Buddy, Baseball Think Factory, Steamer Blog, Razzball, Derek Carty, and FanGraphs. This data set consists 747 observations (players) and 17 variables which include: ‘Player’, ‘Team’, ‘Positions’, ‘AB’, ‘R’, ‘HR’, ‘RBI’, ‘SB’, ‘AVG’, ‘OBP’, ‘H’, ‘2B’, , ‘3B’, ‘BB’, ‘SO’, ‘SLG’, ‘OPS’. This data set is hitter specific, so some of the variables I am most interested in include ‘AVG’ (Batting Average) and ‘OPS’ (On Base Percentage Plus Slugging Percentage). Using these variables, I aim to visualize which teams will have the strongest projected offenses.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nprojections &lt;- read_csv('/Users/bensunshine/Documents/SLU_Senior_Year/SP24/data_334/ds334blog/data/FantasyPros_2024_Projections_H.csv')\n\nRows: 747 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Team, Positions\ndbl (14): AB, R, HR, RBI, SB, AVG, OBP, H, 2B, 3B, BB, SO, SLG, OPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmissing_team &lt;-\n  projections %&gt;%\n  filter(is.na(Team))\n\nnum_players &lt;- nrow(projections)\n\ndivision_order &lt;- c('AL EAST', 'AL CENTRAL', 'AL WEST', 'NL EAST', 'NL CENTRAL', 'NL WEST', NA)\n\nprojections &lt;-\n  projections %&gt;%\n  filter(!is.na(Team)) %&gt;%\n  mutate(Division = case_when(\n    grepl('(BOS|NYY|TOR|BAL|TB)', Team) ~ 'AL EAST',\n    grepl('(MIN|DET|CLE|CWS|KC)', Team) ~ 'AL CENTRAL',\n    grepl('(HOU|TEX|SEA|LAA|OAK)', Team) ~ 'AL WEST',\n    grepl('(ATL|PHI|MIA|NYM|WSH)', Team) ~ 'NL EAST',\n    grepl('(MIL|CHC|CIN|PIT|STL)', Team) ~ 'NL CENTRAL',\n    grepl('(LAD|ARI|SD|SF|COL)', Team) ~ 'NL WEST'\n  )) %&gt;%\n  mutate(Division = factor(Division, levels = division_order))\n\n\nteam_avg_projections &lt;- \n  projections %&gt;%\n  group_by(Division, Team) %&gt;%\n  summarise(num_player = n(),\n            avg_hr = mean(HR),\n            avg_baa = mean(AVG),\n            avg_hits = mean(H),\n            avg_ops = mean(OPS),\n            se_baa = sqrt(\n              ((mean(AVG)/n()) * (1-(mean(AVG)/n()))) /\n                n()\n              )\n            ) %&gt;%\n  mutate(Division = factor(Division, levels = division_order),\n         lb_se_baa = avg_baa - se_baa,\n         ub_se_baa = avg_baa + se_baa)\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/blog_post_01/index.html#visualizations",
    "href": "posts/blog_post_01/index.html#visualizations",
    "title": "Blog Post 01",
    "section": "Visualizations",
    "text": "Visualizations\n\n# error bar plot for mean BAA\nteam_avg_projections %&gt;%\n  mutate(Team = fct_reorder(Team, avg_baa), .desc = T) %&gt;%\n  ggplot(aes(x = Team, y = avg_baa)) +\n  geom_errorbar(aes(ymin = lb_se_baa, ymax = ub_se_baa, colour = Division)) +\n  geom_point(aes(x = Team, y = avg_baa)) +\n  labs(title = \"Mean BAA by Team\",\n       y = \"Mean BAA\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = 'none') +\n  facet_wrap(~ Division, scales = 'free_y') +\n  coord_flip() +\n  theme_minimal()\n\n\n\n\n\nThis first plot analyzes each team’s mean batting average. Each team is grouped into a faceted section of the plot according to their division. The standard error is plotted in addition to the mean batting average for each team to display the variability and confidence intervals around the averages. It can be seen the Colorado Rockies are predicted to have highest average batting average in the 2024 season. Most teams have consistent standard errors, but it appears the Milwaukee Brewers have the smallest standard error, indicating their players are likely to have batting averages closer to their mean batting average than other teams.\n\n\n# bar plot mean OPS\nteam_avg_projections %&gt;%\n  mutate(Team = fct_reorder(Team, avg_ops), .desc = T) %&gt;%\n  ggplot(aes(x = Team,\n             y = avg_ops,\n             fill = Division)) +\n  geom_col(color = 'black') +\n  labs(y = 'Mean OPS',\n       title = 'Mean OPS by Team') +\n  scale_y_continuous(n.breaks = 6) +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = 'none') +\n  facet_wrap(~ Division, scales = 'free_y') +\n  #coord_flip(ylim = c(0.22,0.26)) +\n  coord_flip(ylim = c(0.6,0.75)) +\n  theme_minimal()\n\n\n\n\n\nThe second plot examines each team’s mean on base percentage plus slugging percentage (OPS) using bar plots faceted by their Division. This statistic is unique because it gives insight into the likelihood of a team getting on base and generating extra base hits. Again it can be the Colorado Rockies are projected to have the highest OPS in the MLB at over 0.720. Just behind are both the Boston Red Sox and the Atlanta Braves."
  },
  {
    "objectID": "posts/blog_post_01/index.html#conclusion",
    "href": "posts/blog_post_01/index.html#conclusion",
    "title": "Blog Post 01",
    "section": "Conclusion",
    "text": "Conclusion\nBecause there are 30 teams in the MLB, I decided to facet the teams by their division to make the plots seem less cluttered. In the first plot I also utilized the error bar for displaying the standard error as presented in class. This gives us more information about the distribution of batting averages for each team, which would be lost in the summarized data. To make both graphs easily interpretable, I also arranged each faceted plot to be sorted in descending order of the statistic being examined. This makes it easy for the viewer to see which team has the highest and lowest statistics in each division. In this data set it’s important to note there were 89 players who had ‘NA’ values for their ‘Team’ variable. This is due to the fact that these players are free agents in 2024, so they are currently unassigned to a team. For simplicity, I removed these players from my analysis so I could compare teams and their current players. In the future, I would be interested in comparing each player’s and team’s projected statistics against their actual 2024 statistics. A huge amount is bet on fantasy sports, so it would be interesting to see how well these projections perform."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ds334blog",
    "section": "",
    "text": "Blog Post 01\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]