{
  "hash": "66b01608690ab0dee3aa46f0d581318e",
  "result": {
    "markdown": "---\ntitle: \"Blog Post 01\"\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n\n## Introduction\nIn this blog post, I am analyzing the 2024 MLB Fantasy Baseball Projections. These projections are Zeile Projections, which are baseball specific projections derived from a consensus of 7 sources including ESPN, Draft Buddy, Baseball Think Factory, Steamer Blog, Razzball, Derek Carty, and FanGraphs. This data set consists 747 observations (players) and 17 variables which include: \"Player\", \"Team\", \"Positions\", \"AB\", \"R\", \"HR\", \"RBI\", \"SB\", \"AVG\",  \"OBP\", \"H\", \"2B\", , \"3B\", \"BB\", \"SO\", \"SLG\", \"OPS\". This data set is hitter specific, so some of the variables I am most interested in include \"HR\" (Home Runs), \"AVG\" (Batting Average), \"H\" (Hits), and \"OPS\" (On Base Percentage Plus Slugging Percentage). Using these variables, I aim to visualize which teams will have the strongest project offenses. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#projections <- read_csv(\"data/FantasyPros_2024_Projections_H.csv\")\nprojections <- read_csv(\"/Users/bensunshine/Documents/SLU_Senior_Year/SP24/data_334/ds334blog/data/FantasyPros_2024_Projections_H.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 747 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Team, Positions\ndbl (14): AB, R, HR, RBI, SB, AVG, OBP, H, 2B, 3B, BB, SO, SLG, OPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nnum_players <- nrow(projections)\n\nprojections <-\n  projections %>%\n  mutate(Division = case_when(\n    grepl(\"(BOS|NYY|TOR|BAL|TB)\", Team) ~ \"AL EAST\",\n    grepl(\"(MIN|DET|CLE|CWS|KC)\", Team) ~ \"AL CENTRAL\",\n    grepl(\"(HOU|TEX|SEA|LAA|OAK)\", Team) ~ \"AL WEST\",\n    grepl(\"(ATL|PHI|MIA|NYM|WSH)\", Team) ~ \"NL EAST\",\n    grepl(\"(MIL|CHC|CIN|PIT|STL)\", Team) ~ \"NL CENTRAL\",\n    grepl(\"(LAD|ARI|SD|SF|COL)\", Team) ~ \"NL WEST\"\n  ))\n\ndivision_order <- c(\"AL EAST\", \"AL CENTRAL\", \"AL WEST\", \"NL EAST\", \"NL CENTRAL\", \"NL WEST\", NA)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_team <-\n  projections %>%\n  filter(is.na(Team))\n\nteam_avg_projections <- \n  projections %>%\n  group_by(Division, Team) %>%\n  summarise(num_player = n(),\n            avg_hr = mean(HR),\n            avg_baa = mean(AVG),\n            avg_hits = mean(H),\n            avg_obp = mean(OBP)) %>%\n  mutate(Division = factor(Division, levels = division_order))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n\n\n## Primary Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_avg_projections %>%\n  mutate(Team = fct_reorder(Team, avg_baa), .desc = T) %>%\n  ggplot(aes(x = Team,\n             y = avg_baa,\n             fill = Division)) +\n  geom_col(color = \"black\") +\n  labs(y = \"Average BAA\",\n       title = \"Averag BAA Projection by Team\") +\n  theme_minimal() +\n  #scale_y_continuous(breaks = seq(0, 15, by = 2)) +\n  #scale_y_continuous(n.breaks = 10, limits = c(0.15, 0.5)) +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nteam_avg_projections %>%\n  mutate(Team = fct_reorder(Team, avg_baa), .desc = T) %>%\n  ggplot(aes(x = Team,\n             y = avg_baa)) +\n  geom_col(color = \"red\", fill = \"lightblue\") +\n  labs(y = \"Average BAA\",\n       title = \"Average BAA\") +\n  theme_minimal() +\n  scale_y_continuous(breaks = seq(0, 15, by = 2)) +\n  theme(plot.title = element_text(hjust = 0.5),\n        plot.background = element_rect(size = 2),\n        panel.background = element_rect(size = 2)) +\n  facet_grid(~ Division, ) +\n  coord_flip()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## Conclusion and Wrap-Up\n\n## Connection to Class Ideas",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}